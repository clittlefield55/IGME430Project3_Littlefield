const models = require('../models');

const Account = models.Account;
const Image = models.Image;

const loginPage = (req, res) => {
  res.render('login');
};

const signupPage = (req, res) => {
  res.render('signup');
};

const logout = (req, res) => {
  req.session.destroy();
  res.redirect('/');
};

const login = (request, response) => {
  const req = request;
  const res = response;

    // force cast to strings to cover some security flaws
  const username = `${req.body.username}`;
  const password = `${req.body.pass}`;

  if (!username || !password) {
    return res.status(400).json({ error: 'All fields are required!' });
  }

  return Account.AccountModel.authenticate(username, password, (err, account) => {
    if (err || !account) {
      return res.status(401).json({ error: 'Wrong username or password' });
    }

    req.session.account = Account.AccountModel.toAPI(account);

    return res.json({ redirect: '/app' });
  });
};

const signup = (request, response) => {
  const req = request;
  const res = response;

    // cast to strings to cover up some security flaws
  req.body.username = `${req.body.username}`;
  req.body.pass = `${req.body.pass}`;
  req.body.pass2 = `${req.body.pass2}`;
  req.body.vipAccount = `${req.body.vipAccount}`;

  if (!req.body.username || !req.body.pass || !req.body.pass2) {
    return res.status(400).json({ error: 'All fields are required' });
  }

  if (req.body.pass !== req.body.pass2) {
    return res.status(400).json({ error: 'Passwords do not match' });
  }

  return Account.AccountModel.generateHash(req.body.pass, (salt, hash) => {
    const accountData = {
      username: req.body.username,
      salt,
      password: hash,
      premium: req.body.vipAccount,
    };

    const newAccount = new Account.AccountModel(accountData);

    const savePromise = newAccount.save();

    savePromise.then(() => {
      req.session.account = Account.AccountModel.toAPI(newAccount);
      res.json({ redirect: '/app' });
    });

    savePromise.catch((err) => {
      console.log(err);

      if (err.code === 11000) {
        return res.status(400).json({ error: 'Username already in use.' });
      }

      return res.status(400).json({ error: 'An error occurred' });
    });
  });
};

const changePassword = (request, response) => {
  const req = request;
  const res = response;

  // First, pass an authentication check, to make sure the current password entered was correct
  const authUser = req.session.account.username;
  return Account.AccountModel.authenticate(authUser, req.body.current, (cErr, account) => {
    if (!account) {
      return res.status(401).json({ error: 'Current password is not correct' });
    }
    // should the check pass, proceed with saving the new password

    return Account.AccountModel.generateHash(req.body.pass, (salt, hash) => {
        // I learned the hard way saving both the new password
        // and the salt generated by the hash method is important
      const updateWhat = { _id: req.session.account._id };
      Account.AccountModel.update(updateWhat, { password: hash, salt }, (pErr, result) => {
        if (pErr) {
            // Unlikely, but if there's any error, return the 500 status code.
          return res.status(500).json({ error: 'Server error, password not changed' });
        }
        return res.json({ redirect: '/app' });
      });
    });
  });
};

/*
  There's probably an easier way to do this, but I wrote this code so the client
  can get their premium status highlighted on the app page.
*/
const infoQuery = (request, response) => {
  const req = request;
  const res = response;

  return Account.AccountModel.findById(req.session.account._id, (err, query) => {
    if (err) {
      return res.status(500).json({ error: 'Server error, not your fault' });
    }

    return res.json({
      username: query._doc.username,
      premium: query._doc.premium,
    });
  });
};

const removeAccount = (request, response) => {
  const req = request;
  const res = response;

  // Step 1: we delete the user's images
  return Image.ImageModel.deleteMany({ userId: req.session.account._id }, (iErr, iObj) => {
    if (iErr) {
      return res.status(500).json({ error: 'Server error, not your fault' });
    }

    // Step 2: delete the account itself
    return Account.AccountModel.deleteOne({ _id: req.session.account._id }, (aErr, aObj) => {
      if (aErr) {
        return res.status(500).json({ error: 'Server error, not your fault' });
      }

      // Step 3: redirect the user to the login page, or the server will crash
      return res.json({ redirect: '/logout' });
    });
  });
};

module.exports.loginPage = loginPage;
module.exports.login = login;
module.exports.logout = logout;
module.exports.signupPage = signupPage;
module.exports.signup = signup;
module.exports.changePassword = changePassword;
module.exports.removeAccount = removeAccount;
module.exports.infoQuery = infoQuery;

